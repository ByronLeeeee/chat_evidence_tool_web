name: Build and Push Docker Image to GHCR

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-push-ghcr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          version: latest

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-,format=short
            type=raw,value=latest # Ensures 'latest' tag is always present

      # 构建镜像并加载到本地 runner，但不推送
      - name: Build and load Docker image for scanning
        id: build_for_scan # Added an ID for clarity if needed elsewhere
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./Dockerfile
          push: false # Do not push yet
          load: true  # Load the image into the Docker daemon on the runner
          tags: ${{ steps.meta.outputs.tags }} # Apply all generated tags
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDTIME=${{ github.event.repository.updated_at }}
            VERSION=${{ github.ref }}
            REVISION=${{ github.sha }}

      - name: Scan image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master # Or a specific version like @0.20.0
        with:
          # Use a single, predictable tag that was loaded in the previous step.
          # 'latest' is a good candidate because it's always generated.
          image-ref: 'ghcr.io/${{ github.repository }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          # Optional: If you want the workflow to continue even if vulnerabilities are found (but Trivy itself runs successfully)
          # ignore-unfixed: true
          # exit-code: '0' # To prevent Trivy from failing the step for found vulnerabilities (report only)
                          # If you want the step to fail on vulnerabilities, remove this or set to '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3 # Updated to v3
        if: always() # Run this step even if the previous step (Trivy) fails or finds issues,
                     # as long as trivy-results.sarif might have been created (or not, in case of Trivy error).
                     # GitHub will handle cases where the SARIF file is empty or malformed gracefully.
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./Dockerfile
          push: true # Actually push the image
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache # Use existing cache
          # cache-to is important here if this build differs from the scan build,
          # but since tags/labels are the same, it should reuse layers.
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          platforms: linux/amd64,linux/arm64 # Specify platforms for the final push

      # 避免缓存持续增长
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        # Run this step only if cache-to was used in a preceding step that might have run
        if: always()